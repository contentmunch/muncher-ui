"use strict";(self.webpackChunk_contentmunch_muncher_ui=self.webpackChunk_contentmunch_muncher_ui||[]).push([[2792],{"./src/pill/Pill.stories.tsx":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:function(){return Default},__namedExportsOrder:function(){return __namedExportsOrder},default:function(){return Pill_stories}});var objectSpread2=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/objectSpread2.js"),arrayLikeToArray=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js");var unsupportedIterableToArray=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js");function _toConsumableArray(arr){return function _arrayWithoutHoles(arr){if(Array.isArray(arr))return(0,arrayLikeToArray.Z)(arr)}(arr)||function _iterableToArray(iter){if("undefined"!=typeof Symbol&&null!=iter[Symbol.iterator]||null!=iter["@@iterator"])return Array.from(iter)}(arr)||(0,unsupportedIterableToArray.Z)(arr)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}var _Default$parameters,_Default$parameters2,_Default$parameters2$,slicedToArray=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/slicedToArray.js"),react=__webpack_require__("./node_modules/react/index.js"),Pill=__webpack_require__("./src/pill/Pill.tsx"),src=__webpack_require__("./src/index.ts"),jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js"),Pill_stories={title:"Data Display/Pill",component:Pill.D},Default=function Template(){var _useState=(0,react.useState)(["Pill 1"]),_useState2=(0,slicedToArray.Z)(_useState,2),pills=_useState2[0],setPills=_useState2[1];return(0,jsx_runtime.jsxs)("div",{className:"muncher-pill-story",children:[(0,jsx_runtime.jsx)(src.zx,{variant:"tertiary",onClick:function addPills(){var currentPills=_toConsumableArray(pills);currentPills.push("Pill "+(currentPills.length+1)),setPills(currentPills)},children:"Add pills"}),(0,jsx_runtime.jsx)("br",{}),(0,jsx_runtime.jsx)("br",{}),pills.map((function(pill){return(0,jsx_runtime.jsx)(Pill.D,{pillCloseHandler:function pillCloseHandler(){return function removePill(pill){var currentPills=_toConsumableArray(pills),index=currentPills.indexOf(pill);currentPills.splice(index,1),setPills(currentPills)}(pill)},children:pill},pill)}))]})}.bind({});Default.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},Default.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_Default$parameters=Default.parameters)||void 0===_Default$parameters?void 0:_Default$parameters.docs),{},{source:(0,objectSpread2.Z)({originalSource:'() => {\n  const [pills, setPills] = useState(["Pill 1"]);\n  const addPills = () => {\n    const currentPills = [...pills];\n    currentPills.push("Pill " + (currentPills.length + 1));\n    setPills(currentPills);\n  };\n  const removePill = (pill: string) => {\n    const currentPills = [...pills];\n    const index = currentPills.indexOf(pill);\n    currentPills.splice(index, 1);\n    setPills(currentPills);\n  };\n  return <div className="muncher-pill-story">\n\n            <Button variant={"tertiary"} onClick={addPills}>Add pills</Button>\n            <br /><br />\n            {pills.map(pill => <Pill key={pill} pillCloseHandler={() => removePill(pill)}>{pill}</Pill>)}\n\n        </div>;\n}'},null===(_Default$parameters2=Default.parameters)||void 0===_Default$parameters2||null===(_Default$parameters2$=_Default$parameters2.docs)||void 0===_Default$parameters2$?void 0:_Default$parameters2$.source)})});var __namedExportsOrder=["Default"]}}]);