{"version":3,"file":"Button-0a2baa73.js","sources":["../../src/components/button/Button.tsx"],"sourcesContent":["import React from 'react';\nimport './assets/Button.scss';\n\nexport const Button: React.FC<ButtonProps> =\n    ({\n         type, variant, size, title,\n         active, disabled, rounded,\n         onClick, onMouseDown, onMouseEnter, onMouseLeave, children, ...props\n     }) => {\n        const className = 'muncher-button' +\n            (type && type === 'nav' ? ' muncher-button--nav' : '') +\n            (variant ? ' muncher-button--' + variant : '') +\n            (size ? ' muncher-button--' + size : '') +\n            (active ? ' muncher-button--active' : '') +\n            (rounded ? ' muncher-button--rounded' : '');\n        return (\n            <button\n                type={type ? type !== 'nav' ? type : 'button' : 'button'}\n                className={className}\n                disabled={!!disabled}\n                title={title}\n                onClick={onClick}\n                onMouseDown={onMouseDown}\n                onMouseEnter={onMouseEnter}\n                onMouseLeave={onMouseLeave}\n                {...props}\n            >\n                {children}\n            </button>\n        );\n    };\n\n\nButton.defaultProps = {\n    type: 'button',\n    size: 'medium',\n};\nexport type ButtonTypes = 'button' | 'submit' | 'reset' | 'nav';\n\nexport interface AllButtonProps {\n    variant?: Variant;\n    size?: Size;\n    /**\n     *  button title, corresponds to title on hover\n     */\n    title?: string;\n    active?: boolean;\n    disabled?: boolean;\n    /**\n     * if true, the button edges are rounded\n     */\n    rounded?: boolean;\n    children?: any;\n}\n\nexport interface ButtonProps extends AllButtonProps {\n    type?: ButtonTypes;\n\n    /**\n     * button click handler\n     */\n    onClick?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n\n    /**\n     * button mouse down handler\n     */\n    onMouseDown?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n\n    onMouseEnter?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n    onMouseLeave?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n\n}\n\nexport type Variant = 'primary' | 'secondary' | 'tertiary' | 'transparent' | 'danger';\nexport type Size = 'small' | 'medium' | 'large';\n"],"names":["Button","type","variant","size","title","active","disabled","rounded","onClick","onMouseDown","onMouseEnter","onMouseLeave","children","props","className","jsx"],"mappings":"8CAGO,MAAAA,EAAA,CAAA,CACF,KAAAC,EACI,QAAAC,EAAM,KAAAC,EAAS,MAAAC,EAAM,OAAAC,EACrB,SAAAC,EAAQ,QAAAC,EAAU,QAAAC,EAClB,YAAAC,EAAS,aAAAC,EAAa,aAAAC,EAAc,SAAAC,EAAc,GAAAC,CACtD,IAAA,CACG,MAAAC,EAAA,kBAAAb,GAAAA,IAAA,MAAA,uBAAA,KAAAC,EAAA,oBAAAA,EAAA,KAAAC,EAAA,oBAAAA,EAAA,KAAAE,EAAA,0BAAA,KAAAE,EAAA,2BAAA,IAMA,OAAAQ,EAAA,IACI,SAAC,CAAA,KAAAd,GAAAA,IAAA,MAAAA,EAAA,SACmD,UAAAa,EAChD,SAAA,CAAA,CAAAR,EACY,MAAAF,EACZ,QAAAI,EACA,YAAAC,EACA,aAAAC,EACA,aAAAC,EACA,GAAAE,EACI,SAAAD,CAEH,CAAA,CAGb,EAGJZ,EAAA,aAAA,CAAsB,KAAA,SACZ,KAAA,QAEV"}