{"version":3,"file":"Accordion-174a0889.js","sources":["../../src/components/accordion/Accordion.tsx"],"sourcesContent":["import React, {ReactNode, useState} from \"react\";\nimport \"./assets/Accordion.scss\";\nimport {Variant} from \"../button/Button\";\n\n\nexport const Accordion: React.FC<AccordionProps> = ({variant, children}) => {\n    const {folds} = children;\n    const [currentIndex, setCurrentIndex] = useState(0);\n\n    const foldClass = (index: number) => index === currentIndex\n        ? \"fold active\" : \"fold\";\n    const buttonClass = (index: number) => 'fold-button' +\n        (variant ? ' fold-button--' + variant : '') +\n        (folds[index].foldColor ? ' fold-button--primary fold-button--' + folds[index].foldColor : '');\n\n    const handleButtonKeyDown = (event: React.KeyboardEvent<HTMLButtonElement>) => {\n\n        const key = event.which.toString();\n        const ctrlModifier = (event.ctrlKey && key.match(/33|34/));\n\n        if (key.match(/38|40/) || ctrlModifier) {\n            const direction = (key.match(/34|40/)) ? 1 : -1;\n            const length = folds.length;\n            const newIndex = (currentIndex + length + direction) % length;\n            setCurrentIndex(newIndex);\n        } else {\n            // 36 = Home key\n            if (key === '36') {\n                setCurrentIndex(0);\n            }\n            // 35 = End key\n            if (key === '35') {\n                setCurrentIndex(folds.length - 1);\n            }\n        }\n        event.preventDefault();\n    };\n    return (\n        <div className=\"muncher-accordion\">\n            {folds.map((fold, index) =>\n                <div key={\"muncher-accordion-fold-\" + index} className={foldClass(index)}\n                     aria-expanded={currentIndex === index}>\n                    <button className={buttonClass(index)}\n                            onKeyDown={handleButtonKeyDown}\n                            onClick={() => setCurrentIndex(index)}>\n                        <span>{fold.heading}</span>\n                    </button>\n                    <section className=\"fold-content\">\n                        {fold.body}\n                    </section>\n                </div>\n            )}\n        </div>\n    );\n}\n\nexport interface AccordionProps {\n\n    children: {\n        /**\n         * Folds for accordion\n         */\n        folds: Fold[]\n    };\n    /**\n     * Variant for fold button\n     */\n    variant?: Variant;\n}\n\nexport interface Fold {\n    heading: string,\n    body: ReactNode\n    foldColor?: \"maroon\" | \"purple\" | \"green\" | \"blue\" | \"orange\"\n}"],"names":["Accordion","variant","children","folds","currentIndex","setCurrentIndex","useState","foldClass","index","buttonClass","handleButtonKeyDown","event","key","ctrlModifier","direction","length","newIndex","jsx","fold","jsxs"],"mappings":"sFAKO,MAAAA,EAAA,CAAA,CAAA,QAAAC,EAAA,SAAAC,KAAA,CACH,KAAA,CAAA,MAAAC,CAAA,EAAAD,EACA,CAAAE,EAAAC,CAAA,EAAAC,EAAA,SAAA,CAAA,EAEAC,EAAAC,GAAAA,IAAAJ,EAAA,cAAA,OAEAK,EAAAD,GAAA,eAAAP,EAAA,iBAAAA,EAAA,KAAAE,EAAAK,CAAA,EAAA,UAAA,sCAAAL,EAAAK,CAAA,EAAA,UAAA,IAIAE,EAAAC,GAAA,CAEI,MAAAC,EAAAD,EAAA,MAAA,SAAA,EACAE,EAAAF,EAAA,SAAAC,EAAA,MAAA,OAAA,EAEA,GAAAA,EAAA,MAAA,OAAA,GAAAC,EAAA,CACI,MAAAC,EAAAF,EAAA,MAAA,OAAA,EAAA,EAAA,GACAG,EAAAZ,EAAA,OACAa,GAAAZ,EAAAW,EAAAD,GAAAC,EACAV,EAAAW,CAAA,CAAwB,MAGxBJ,IAAA,MACIP,EAAA,CAAA,EAGJO,IAAA,MACIP,EAAAF,EAAA,OAAA,CAAA,EAGRQ,EAAA,eAAA,CAAqB,EAEzB,OAAAM,EAAAA,IAAA,MAAA,CAAA,UAAA,oBAAA,SAAAd,EAAA,IAEe,CAAAe,EAAAV,IAAAW,EAAA,KACH,MAAC,CAAA,UAAAZ,EAAAC,CAAA,EAAsE,gBAAAJ,IAAAI,EAClC,SAAA,CACjCS,EAAA,IAAA,SAAC,CAAA,UAAAR,EAAAD,CAAA,EAAmC,UAAAE,EACjB,QAAA,IAAAL,EAAAG,CAAA,EACyB,SAAAS,EAAA,IAAA,OAAA,CAAA,SAAAC,EAAA,QAAA,CACpB,CAAA,EACxBD,EAAA,IAAA,UAAA,CAAA,UAAA,eAAA,SAAAC,EAAA,KAAA,CAGA,CAAA,EAAA,0BAAAV,CATkC,CAUtC,CAAA,CAAA,CAIhB"}